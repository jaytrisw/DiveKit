import XCTest
@testable import DiveKit

final class DKEnrichedAirTests: XCTestCase {
    var diveKit = DiveKit.init()
    var enrichedAir = DKEnrichedAir.init()
    
    // MARK: - Maximum Operating Depth
    func testSaltWaterImperialOneFour() {
        diveKit = DiveKit.init()
        enrichedAir = DKEnrichedAir(with: diveKit)
        // partial pressure 1.4
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 22)), 177)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 23)), 167)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 24)), 159)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 25)), 151)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 26)), 144)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 27)), 138)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 28)), 131)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 29)), 126)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 30)), 121)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 31)), 116)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 32)), 111)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 33)), 107)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 34)), 102)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 35)), 99)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 36)), 95)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 37)), 91)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 38)), 88)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 39)), 85)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 40)), 82)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 41)), 79)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 42)), 76)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 43)), 74)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 44)), 72)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 45)), 69)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 46)), 67)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 47)), 65)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 48)), 63)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 49)), 61)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 50)), 59)
    }
    func testSaltWaterImperialOneSix() {
        diveKit = DiveKit.init()
        enrichedAir = DKEnrichedAir(with: diveKit)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 22)), 207)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 23)), 196)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 24)), 187)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 25)), 178)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 26)), 170)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 27)), 162)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 28)), 155)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 29)), 149)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 30)), 143)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 31)), 137)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 32)), 132)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 33)), 127)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 34)), 122)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 35)), 117)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 36)), 113)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 37)), 109)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 38)), 105)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 39)), 102)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 40)), 99)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 41)), 95)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 42)), 92)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 43)), 89)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 44)), 87)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 45)), 84)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 46)), 81)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 47)), 79)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 48)), 77)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 49)), 74)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 50)), 72)
    }
    func testFreshWaterImperialOneFour() {
        diveKit = DiveKit.init(waterType: .freshWater)
        enrichedAir = DKEnrichedAir(with: diveKit)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 22)), 182)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 23)), 172)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 24)), 164)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 25)), 156)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 26)), 149)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 27)), 142)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 28)), 135)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 29)), 130)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 30)), 124)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 31)), 119)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 32)), 114)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 33)), 110)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 34)), 105)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 35)), 102)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 36)), 98)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 37)), 94)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 38)), 91)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 39)), 88)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 40)), 84)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 41)), 82)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 42)), 79)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 43)), 76)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 44)), 74)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 45)), 71)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 46)), 69)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 47)), 67)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 48)), 65)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 49)), 63)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 50)), 61)
    }
    func testFreshWaterImperialOneSix() {
        diveKit = DiveKit.init(waterType: .freshWater)
        enrichedAir = DKEnrichedAir(with: diveKit)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 22)), 213)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 23)), 202)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 24)), 192)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 25)), 183)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 26)), 175)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 27)), 167)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 28)), 160)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 29)), 153)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 30)), 147)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 31)), 141)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 32)), 136)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 33)), 130)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 34)), 126)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 35)), 121)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 36)), 117)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 37)), 113)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 38)), 109)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 39)), 105)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 40)), 102)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 41)), 98)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 42)), 95)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 43)), 92)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 44)), 89)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 45)), 86)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 46)), 84)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 47)), 81)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 48)), 79)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 49)), 77)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 50)), 74)
    }
    func testSaltWaterMetricOneFour() {
        diveKit = DiveKit.init(measurementUnit: .metric)
        enrichedAir = DKEnrichedAir(with: diveKit)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 22), accuracy: 1), 53.6)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 23), accuracy: 1), 50.9)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 24), accuracy: 1), 48.3)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 25), accuracy: 1), 46)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 26), accuracy: 1), 43.8)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 27), accuracy: 1), 41.9)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 28), accuracy: 1), 40)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 29), accuracy: 1), 38.3)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 30), accuracy: 1), 36.7)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 31), accuracy: 1), 35.2)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 32), accuracy: 1), 33.8)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 33), accuracy: 1), 32.4)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 34), accuracy: 1), 31.2)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 35), accuracy: 1), 30)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 36), accuracy: 1), 28.9)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 37), accuracy: 1), 27.8)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 38), accuracy: 1), 26.8)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 39), accuracy: 1), 25.9)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 40), accuracy: 1), 25)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 50), accuracy: 1), 18)
    }
    func testSaltWaterMetricOneSix() {
        diveKit = DiveKit.init(measurementUnit: .metric)
        enrichedAir = DKEnrichedAir(with: diveKit)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 22), accuracy: 1), 62.7)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 23), accuracy: 1), 59.6)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 24), accuracy: 1), 56.7)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 25), accuracy: 1), 54)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 26), accuracy: 1), 51.5)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 27), accuracy: 1), 49.3)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 28), accuracy: 1), 47.1)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 29), accuracy: 1), 45.2)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 30), accuracy: 1), 43.3)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 31), accuracy: 1), 41.6)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 32), accuracy: 1), 40)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 33), accuracy: 1), 38.5)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 34), accuracy: 1), 37.1)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 35), accuracy: 1), 35.7)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 36), accuracy: 1), 34.4)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 37), accuracy: 1), 33.2)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 38), accuracy: 1), 32.1)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 39), accuracy: 1), 31)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 40), accuracy: 1), 30)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.6, gas: .enrichedAir(percentage: 50), accuracy: 1), 22)
    }
    func testFreshWaterMetrixOneFour() {
        enrichedAir = DKEnrichedAir(waterType: .freshWater, measurementUnit: .metric)
        XCTAssertEqual(enrichedAir.maximumOperatingDepth(fractionOxygen: 1.4, gas: .enrichedAir(percentage: 32), accuracy: 2), 34.76)
    }
    
    // MARK: - Equivalent Air Depth
    func testEquivalentAirDepth() {
        var gas = DKGas.enrichedAir(percentage: 36)
        enrichedAir = DKEnrichedAir.init(waterType: .saltWater, measurementUnit: .imperial)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 90, gas: gas), 67)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 33, gas: gas), 20)
        enrichedAir = DKEnrichedAir.init(waterType: .saltWater, measurementUnit: .metric)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 27, gas: gas, accuracy: 2), 19.97)
        gas = DKGas.enrichedAir(percentage: 32)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 35, gas: gas, accuracy: 1), 28.7)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 30.5, gas: gas, accuracy: 1), 24.9)
        gas = DKGas.air
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 35, gas: gas, accuracy: 1), 35)
        enrichedAir = DKEnrichedAir.init(waterType: .saltWater, measurementUnit: .imperial)
        gas = DKGas.enrichedAir(percentage: 32)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 100, gas: gas, accuracy: 1), 81.5)
        enrichedAir = DKEnrichedAir.init(waterType: .freshWater, measurementUnit: .metric)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 30, gas: gas, accuracy: 1), 24.4)
       enrichedAir = DKEnrichedAir.init(waterType: .freshWater, measurementUnit: .imperial)
        XCTAssertEqual(enrichedAir.equivalentAirDepth(depth: 110, gas: gas), 90)
    }
    
    // MARK: - Best Blend
    func testBestBlend() {
        enrichedAir = DKEnrichedAir(waterType: .saltWater, measurementUnit: .metric)
        XCTAssertEqual(try! enrichedAir.bestBlend(for: 35, fractionOxygen: 1.4).percentOxygen, 32)
        XCTAssertEqual(try! enrichedAir.bestBlend(for: 25, fractionOxygen: 1.4).percentOxygen, 40)
        XCTAssertThrowsError(try enrichedAir.bestBlend(for: 25, fractionOxygen: -1.4))
        XCTAssertThrowsError(try enrichedAir.bestBlend(for: -25, fractionOxygen: 1.4))
        enrichedAir = DKEnrichedAir(waterType: .saltWater, measurementUnit: .imperial)
        XCTAssertEqual(try! enrichedAir.bestBlend(for: 100, fractionOxygen: 1.4).percentOxygen, 35)
    }
    
    // MARK: - Inititalizers
    func testEnrichedAirInititalizers() {
        enrichedAir = DKEnrichedAir.init()
        XCTAssertEqual(enrichedAir.diveKit.measurementUnit, DiveKit.MeasurementUnit.imperial)
        XCTAssertEqual(enrichedAir.diveKit.waterType, DiveKit.WaterType.saltWater)
        diveKit = DiveKit.init()
        enrichedAir = DKEnrichedAir.init(with: diveKit)
        XCTAssertEqual(enrichedAir.diveKit.measurementUnit, DiveKit.MeasurementUnit.imperial)
        XCTAssertEqual(enrichedAir.diveKit.waterType, DiveKit.WaterType.saltWater)
        enrichedAir = DKEnrichedAir.init(measurementUnit: .metric)
        XCTAssertEqual(enrichedAir.diveKit.measurementUnit, DiveKit.MeasurementUnit.metric)
        XCTAssertEqual(enrichedAir.diveKit.waterType, DiveKit.WaterType.saltWater)
        enrichedAir = DKEnrichedAir.init(waterType: .freshWater)
        XCTAssertEqual(enrichedAir.diveKit.measurementUnit, DiveKit.MeasurementUnit.imperial)
        XCTAssertEqual(enrichedAir.diveKit.waterType, DiveKit.WaterType.freshWater)
        enrichedAir = DKEnrichedAir.init(waterType: .freshWater, measurementUnit: .metric)
        XCTAssertEqual(enrichedAir.diveKit.measurementUnit, DiveKit.MeasurementUnit.metric)
        XCTAssertEqual(enrichedAir.diveKit.waterType, DiveKit.WaterType.freshWater)
    }
    
    static var allTests = [
        ("testSaltWaterImperialOneFour", testSaltWaterImperialOneFour),
        ("testSaltWaterImperialOneSix", testSaltWaterImperialOneSix),
        ("testFreshWaterImperialOneFour", testFreshWaterImperialOneFour),
        ("testFreshWaterImperialOneSix", testFreshWaterImperialOneSix),
        ("testSaltWaterMetricOneFour", testSaltWaterMetricOneFour),
        ("testSaltWaterMetricOneSix", testSaltWaterMetricOneSix),
        ("testEquivalentAirDepth", testEquivalentAirDepth),
        ("testEnrichedAirInititalizers", testEnrichedAirInititalizers)
    ]
}
